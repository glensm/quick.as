{
  "name": "node-cache-system",
  "description": "A node.js module to cache data using Redis or in-memory",
  "version": "0.1.1",
  "author": {
    "name": "Ismael Gorissen",
    "email": "ismael.gorissen@pinchproject.com"
  },
  "dependencies": {
    "redis": "0.8.x",
    "debug": "0.7.X"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/PinchProject/Node-CacheSystem.git"
  },
  "bugs": {
    "url": "https://github.com/PinchProject/Node-CacheSystem/issues"
  },
  "main": "./lib/index",
  "directories": {
    "lib": "lib",
    "examples": "examples"
  },
  "keywords": [
    "cache",
    "caching",
    "redis",
    "memory"
  ],
  "readme": "# Node-CacheSystem\n\n![dependencies](https://david-dm.org/PinchProject/Node-CacheSystem.png)\n\n## Install\n\n```\n[sudo] npm install node-cache-system\n```\n\n## Usage\n\n```\n/* Require the module first */\nvar Cache = require('node-cache-system');\n\n/* Use in-memory */\nvar inMemoryCache = new Cache();\n\ninMemoryCache.set('key','value');\nconsole.log(inMemoryCache.get('key));\ninMemoryCache.clear();\n\n\n/* Use redis */\nvar redisCache = new Cache('redis');\n\nredisCache.set('key','value', 2000);\nredisCache.get('key', function(err, data) {\n\tif (!err) {\n\t\tconsole.log(data);\n\t} else {\n\t\tconsole.log(err);\n\t}\n});\n```\n\n**Important** : you can use debug option when launching your code with `DEBUG=* node apps.js`, `DEBUG=cache:redis node app.js` or `DEBUG=cache:memory node app.js`\n\n## API\n\n#### In-memory\n\n* `get(key)`\n\n\tReturn key value from the cache\n\n* `set(key, value, ttl)`\n\n\tAdd key value in the cache with or without time to live option\n\n* `del(key)`\n\n\tRemove a key from the cache\n\n* `size()`\n\n\tReturn the number of keys in the cache\n\n* `clear()`\n\n\tClear the cache entirely\n\n* `byteLength()`\n\n\tReturn bytes length of the cache\n\n\n#### Redis\n\n* `get(key, callback)`\n\n\tReturn the key value from database and return in the callback an error or the key value\n\n* `set(key, value, ttl)`\n\n\tAdd key value in the database with or without time to live option\n\n* `del(key)`\n\n\tRemove a key from database\n\n* `size(callback)`\n\n\tReturn the number of keys in the database and return in the callback an error\n\tif there is one\n\n* `clear(callback)`\n\n\tClear the database entirely and return in the callback an error or the number\n\tof keys that have been removed\n\n\n## License\n\n(The MIT License)\n\nCopyright (C) 2013 PinchProject\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n## Change log\n\n#### v0.1.0\n\n* first release",
  "readmeFilename": "README.md",
  "_id": "node-cache-system@0.1.1",
  "dist": {
    "shasum": "02ffc12bed866137b3135b6f7bd7374303adade4"
  },
  "_from": "node-cache-system@",
  "_resolved": "https://registry.npmjs.org/node-cache-system/-/node-cache-system-0.1.1.tgz"
}
